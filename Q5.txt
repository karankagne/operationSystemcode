#include <cstdio>
#include <string>
#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

struct Process{
	char name[100];	
	int at = 0, bt = 0, pt = 0, wt = 0, ct = 0, tat = 0, rt = 0;
	bool operator < (const Process &p){
		// relational operator so that we can sort the process according to arrival time then priority 
		if(at == p.at){
			return pt < p.pt;
		} else {
			return at < p.at;
		}
	}
	void getInput(){
		cin >> name >> at >> bt >> pt;
		rt = bt; // set remaining time as burst time
		// process name arrival time burst time prority	resp. ^
	}
};

            
int main(){
	int n; //no. of processors	
	int i;
	cin >> n;
	Process arr[n];	
	for(i = 0 ; i < n ; i++){
		arr[i].getInput();
	}
	int tq;
	cin >> tq ; // time quantum;
	cout <<"Process table before execution\n";
	sort(arr, arr + n); 
	for(i = 0 ; i < n ; i++){
		cout << arr[i].name;
		printf("\t%d\t%d\t%d\n", arr[i].at, arr[i].bt, arr[i].pt);
	}
	int sys_time = 0;                             
	for(i = 0 ; i < n ;i++){
		if(arr[i].at > sys_time)		
			sys_time = arr[i].at;
		sys_time += arr[i].bt;
		arr[i].ct = sys_time;
		arr[i].tat = arr[i].ct - arr[i].at;
		arr[i].wt = arr[i].tat - arr[i].bt;
	}
	cout << "Process table after execution\n";
	printf("Name\tArrival\tcompletion\tburst\tpriproty\tturnaround\twaitint\n");
	for(i = 0 ; i < n ; i++){
		printf("%s\t%d\t%d\t\t%d\t%d\t\t%d\t\t%d\n",arr[i].name, arr[i].at,arr[i].ct, arr[i].bt,arr[i].pt,arr[i].tat, arr[i].wt);
	}

	return 0;	
}